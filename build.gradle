apply plugin:'base'

buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath "com.jaredsburrows:gradle-license-plugin:0.8.41"
    classpath "com.github.ben-manes:gradle-versions-plugin:0.20.0"
    classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
  }
}
apply plugin: "com.github.ben-manes.versions"

allprojects {
	version = '1.1.1'
	apply plugin: 'eclipse'
	apply plugin: 'idea'
}

subprojects {
	apply plugin: 'java'
	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	repositories {
		jcenter()
		mavenCentral()
		maven { url 'https://jitpack.io' }
	}

	dependencies {
		testCompile 'junit:junit:4.12'
	}

	sourceSets {
		main {
			java {
				srcDirs = ['src/main/java']
			}
			resources {
				srcDirs = ['src/main/resources', 'src/main/generated-resources']
			}
		}
	}
}

task regenerate(type: GradleBuild) {
	group 'Generation'
	description 'Regenerate all resources except screenshots'
    // All other generators are called as transitive dependencies
    tasks = ['BlockMap-internal:generateBlockStates', 'BlockMap-internal:generateData']
}

task beforeCommit(type: GradleBuild) {
	group 'Distribution'
	description 'Call this before each commit to make sure it works'
	tasks = ['clean', 'regenerate', 'test', 'BlockMap-internal:generateScreenshots']
}

task initEclipse(type: GradleBuild) {
	group 'IDE'
	tasks = ['cleanRegenerate', 'cleanEclipse', 'eclipse']
}

task initIdea(type: GradleBuild) {
	group 'IDE'
	tasks = ['cleanRegenerate', 'cleanIdea', 'idea']
}

task github(type: GradleBuild) {
	group 'Distribution'
	description 'Generate a fat jar to publish on GitHub (or to execute) after having run all tests'
	tasks = ['cleanRegenerate', 'build', ':BlockMap-standalone:shadowJar']
}
